import logging
import os
import db_method
from dotenv import load_dotenv
from middlewares import AccessMiddleware
from aiogram.utils.exceptions import MessageTextIsEmpty
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from aiogram import Bot, Dispatcher, executor, types
import menu_buttons as mb
import pars_cbr as cb

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
ACCESS_ID = os.getenv("TELEGRAM_ACCESS")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–¥–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(AccessMiddleware(ACCESS_ID))


class AddCategory(StatesGroup):
    category = State()

class DelCategory(StatesGroup):
    category = State()


@dp.message_handler(commands=['start'])
async def welcome_massage(message: types.Message):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É `/start`"""
    answer_message = (
        f'–ü—Ä–∏–≤–µ—Çüëã\n–Ø –±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤üßê\n\n'
        f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—èüëá\n'
        f'‚úÖ–ü—Ä–∏–º–µ—Ä: 350 —Ç–∞–∫—Å–∏ –∏–ª–∏ 189.04 –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ø–µ–π–∫–∏.\n'
        f'‚úÖ–°–Ω–∞—á–∞–ª–∞ –ø–∏—à–∏—Ç–µ —Å—É–º–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ø–µ–π–∫–∏, —Ç–æ –ø–∏—à–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É), –ø—Ä–æ–±–µ–ª, –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å".\n\n'
        f'–û –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö: "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"\n'
    )
    await message.answer(answer_message, reply_markup=mb.mainMenu)

# –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–∞
@dp.message_handler(content_types=['text'], text='‚ûï–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def testing(message: types.Message):
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    )
    await AddCategory.category.set()

# –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.message_handler(state=AddCategory.category)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    if answer in db_method.get_category_list():
        await message.answer('–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        
        await state.finish()
    else:
        db_method.add_category(answer)
        await state.update_data(answer1=answer)
        data = await state.get_data()
        answer1 = data.get('answer1')
        await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{answer1}" –¥–æ–±–∞–≤–ª–µ–Ω–∞.')

        await state.finish()


# –û–ø—Ä–∞—à–∏–≤–∞–µ—Ç —é–∑–µ—Ä–∞
@dp.message_handler(content_types=['text'], text='‚ûñ–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def testing(message: types.Message):
    await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
    )
    await DelCategory.category.set()

# –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.message_handler(state=DelCategory.category)
async def answer_q1(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in db_method.get_category_list():
        await message.answer('–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')
        
        await state.finish()
    else:
        db_method.del_category(answer)
        await state.update_data(answer2=answer)
        await message.answer(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{answer}" —É–¥–∞–ª–µ–Ω–∞.')

        await state.finish()


@dp.message_handler(commands=['del_last'])
async def delete_last_exp(message: types.message.Message):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å"""
    db_method.delete_last()
    await message.answer('–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!')


@dp.message_handler(content_types=['text'], text='‚ùîHelp')
async def help_massage(message: types.Message):
    """–≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç –∫–Ω–æ–ø–∫—É help"""
    answer_message = (
        f'–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
        f'–ü—Ä–∏–º–µ—Ä: 350 —Ç–∞–∫—Å–∏\n'
        f'–°–Ω–∞—á–∞–ª–∞ –ø–∏—à–∏—Ç–µ —Å—É–º–º—É, –ø—Ä–æ–±–µ–ª, –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –Ω–∞–∂–º–∏—Ç–µ "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å".\n\n'
        f'–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å: /del_last\n\n'
    )
    await message.answer(answer_message)


@dp.message_handler(content_types=['text'], text='‚úÖ–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def category_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        await message.answer(
            db_method.get_category_text()
        )
    except MessageTextIsEmpty:
        await message.answer('–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—É—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')


@dp.message_handler(content_types=['text'], text='üßæ–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ')
async def last_expanses(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π –≤ —Ä–∞—Å—Ö–æ–¥—ã"""
    count_last = len(db_method.last())
    if count_last == 0:
        await message.answer('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤')
    else:
        await message.answer(db_method.last_expense())


@dp.message_handler(content_types=['text'], text='üí∏–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü')
async def month_expanses(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü"""
    db_method.sum_of_month()
    await message.answer(db_method.sum_of_month())


@dp.message_handler(commands=['del_all'])
async def delete_all(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î"""
    db_method.delete_all()
    await message.answer('–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!')


@dp.message_handler(content_types=['text'], text='üìÉ–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
async def month_category_stat(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    await message.answer(db_method.sum_of_month_category())


@dp.message_handler(content_types=['text'], text='üí∏–†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è')
async def day_category_stat(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å"""
    await message.answer(db_method.sum_of_today())


@dp.message_handler(content_types=['text'], text='üìà–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞')
async def usd_price_cb(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å –¥–æ–ª–ª—Ä–∞"""
    await message.answer(cb.usd_price())


@dp.message_handler()
async def add_expanse(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
    try:
        expanses = db_method.parse_msg(message.text)
        check_category = db_method.valid_category(expanses[1])
        if not check_category:
            await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏‚§µÔ∏è')
            await message.answer(db_method.get_category_text())
        else:
            db_method.write_on_db(expanses)
            answer_message = (
                f'–†–∞—Å—Ö–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n–°—É–º–º–∞: {expanses[0]}—Ä.\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {expanses[1]}\n\n'
            )
            await message.answer(answer_message)
    except ValueError:
        await message.answer(
            '–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, –ø—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞:\n'
            '–ü—Ä–∏–º–µ—Ä: 350 –µ–¥–∞\n\n'
            '–û –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö‚§µÔ∏è',
            reply_markup=mb.inline_kb
        )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
